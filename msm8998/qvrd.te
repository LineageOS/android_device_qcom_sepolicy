# Copyright (c) 2016, The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

type qvrd, domain, mlstrustedsubject;
type qvrd_exec, exec_type, file_type;

init_daemon_domain(qvrd)

#
# General
#

# Allow interracting with qvrd directory
allow qvrd qvrd_data_file:dir create_dir_perms;
allow qvrd qvrd_data_file:file create_file_perms;

# Allow access to our socket
allow qvrd qvrd_socket:sock_file rw_file_perms;

#
# Sensors
#

# Allow access to ADSP & SLPI
allow qvrd { ion_device qdsp_device dsp_device }:chr_file r_file_perms;

# Allow access to adsprpcd
r_dir_file(qvrd, adsprpcd_file);
allow qvrd system_file:dir read;

#
# Display
#

# Allow access to /sys/devices/virtual/graphics/fb* for lineptr interrupts
allow qvrd sysfs_graphics:file rw_file_perms;

# Allow access to /dev/graphics/fb0 for configuring vsync interrupts
allow qvrd graphics_device:dir r_dir_perms;
allow qvrd graphics_device:chr_file rw_file_perms;

#
# Scheduler
#

allow qvrd self:capability { sys_nice };
userdebug_or_eng(`
  allow qvrd su:process setsched;
')
allow qvrd appdomain:process setsched;

#
# Camera
#

# Allow access to camera HAL
allow qvrd { gpu_device video_device camera_device sensors_device }:chr_file rw_file_perms;
allow qvrd camera_data_file:dir rw_dir_perms;
allow qvrd camera_data_file:sock_file w_file_perms;
allow qvrd mm-qcamerad:unix_dgram_socket sendto;
binder_use(qvrd)
binder_call(qvrd, surfaceflinger);
allow qvrd surfaceflinger_service:service_manager find;
allow qvrd sysfs:file r_file_perms;

# Allow access to /dev/video/* devices
allow qvrd video_device:dir r_dir_perms;

unix_socket_connect(qvrd, mpctl, perfd)

# Allow access to sensor1 API
allow qvrd self:socket create_socket_perms;
allow qvrd persist_file:dir r_dir_perms;
allow qvrd sensors_persist_file:dir r_dir_perms;
allow qvrd sensors_persist_file:file r_file_perms;
