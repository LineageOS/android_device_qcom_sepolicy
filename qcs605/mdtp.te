# Copyright (c) 2015, The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

type mdtpdaemon, domain;
type mdtpdaemon_exec, exec_type, vendor_file_type, file_type;

allow mdtpdaemon self:capability {
    setuid
    setgid
};

userdebug_or_eng(`
    #Needed for kill(pid, 0) existance test
    allow mdtpdaemon su:process signull;
    allow mdtpdaemon self:capability kill;
    diag_use(mdtpdaemon)
')

#Allow for transition from init domain to mdtpdaemon
init_daemon_domain(mdtpdaemon)

#Allow mdtpdaemon to use Binder IPC
#binder_use(mdtpdaemon)

#Mark mdtpdaemon as a Binder service domain
#binder_service(mdtpdaemon)

#Allow mdtpdaemon to be registered with service manager
#allow mdtpdaemon mdtpdaemon_service:service_manager { add find };

#Allow apps to interact with mdtpdaemon
binder_call(mdtpdaemon, platform_app)

#Allow access to firmware
r_dir_file(mdtpdaemon, firmware_file)

#Allow access to qsee directories
allow mdtpdaemon data_qsee_file:dir create_dir_perms;
allow mdtpdaemon data_qsee_file:file create_file_perms;

#Allow access to qsee fifos
allow mdtpdaemon data_qsee_file:fifo_file create_file_perms;

#Allow access to tee device
allow mdtpdaemon tee_device:chr_file rw_file_perms;

# Provide access to block devices
allow mdtpdaemon block_device:dir r_dir_perms;
allow mdtpdaemon mdtp_device:blk_file rw_file_perms;
allow mdtpdaemon system_block_device:blk_file r_file_perms;

# Provide access to QTI Crypto driver for MDTP
# allow mdtpdaemon qce_device:chr_file rw_file_perms;

# Provide read access to all /system files for MDTP file-to-block-mapping
r_dir_file(mdtpdaemon, exec_type)
r_dir_file(mdtpdaemon, system_file)

# Provide mdtpd ability to access QMUXD/IPCRouter for QMI
qmux_socket(mdtpdaemon);
allow mdtpdaemon self:socket create_socket_perms;
allowxperm mdtpdaemon self:socket ioctl msm_sock_ipc_ioctls;

# Provide tee ability to run executables in rootfs for MDTP
allow mdtpdaemon rootfs:file x_file_perms;
allow mdtpdaemon ion_device:chr_file r_file_perms;
allow mdtpdaemon sysfs:file r_file_perms;
allow mdtpdaemon sysfs_data:file r_file_perms;
