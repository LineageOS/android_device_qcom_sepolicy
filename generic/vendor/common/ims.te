# Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
type ims, domain;
type ims_exec, exec_type, vendor_file_type, file_type;

init_daemon_domain(ims)
net_domain(ims)

get_prop(ims, hwservicemanager_prop)
set_prop(ims, ims_prop)
get_prop(ims, ims_prop)
get_prop(ims, cnd_prop)

allow ims sysfs_data:file r_file_perms;

allow ims self:capability net_bind_service;

allow ims ion_device:chr_file r_file_perms;

unix_socket_connect(ims, cnd, cnd)

allow ims self:socket create_socket_perms_no_ioctl;
allow ims ims_socket:sock_file write;
allow ims self:{ qipcrtr_socket } create_socket_perms_no_ioctl;
allow ims self:{ netlink_generic_socket } create_socket_perms_no_ioctl;
netmgr_socket(ims);
allowxperm ims self:udp_socket ioctl RMNET_IOCTL_EXTENDED;

#diag
userdebug_or_eng(`
    diag_use(ims)
')

hwbinder_use(ims)
allow ims hal_cne_hwservice:hwservice_manager find;
allow ims hal_datafactory_hwservice:hwservice_manager find;
binder_call(ims, cnd)
